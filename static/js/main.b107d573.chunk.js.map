{"version":3,"sources":["components/Loader/Loader.module.css","App.module.css","components/Loader/Loader.js","components/Card/Card.js","components/Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loader","className","classes","lds","Cards","cases","deaths","recovered","loading","time","CardDeck","Card","Body","Title","style","color","fontWeight","fontSize","Text","value","displayType","thousandSeparator","Footer","backgroundColor","Map","useState","countries","setCountries","error","setError","useEffect","a","axios","get","response","data","console","log","fetchMap","map","c","country","location","d","img","height","src","countryInfo","flag","alt","lat","lng","long","width","textAlign","fontStyle","bootstrapURLKeys","key","defaultCenter","defaultZoom","App","setData","setLoading","fetchData","Date","parseInt","updated","toDateString","container","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b107d573.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds\":\"Loader_lds__1z-9p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","import React from 'react';\nimport classes from './Loader.module.css'\n\nexport const Loader = () => {\n    return (\n        <div className={classes.lds}></div>\n    )\n}\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport {Loader} from '../Loader/Loader';\nimport NumberFormat from 'react-number-format';\n\nexport const Cards = ({cases,deaths,recovered, loading, time}) => {\n  \n  if(loading){\n    return <Loader/>\n  }\n    return (\n      <CardDeck >\n       <Card className='text-center' >\n        <Card.Body>\n          <Card.Title style={{color:'orange', fontWeight:'bold',fontSize:'26px'}}>Cases</Card.Title>\n          <Card.Text>\n           <NumberFormat value={cases} displayType={'text'}\n           thousandSeparator={true}/>\n          </Card.Text>\n        </Card.Body>\n        <Card.Footer style={{backgroundColor:'#9AC3F3'}}  >\n \n          <small className=\"text-muted\">\n            <span style={{color:'darkBlue', fontSize:'16px'}}>\n              Last updated: <b>{time}</b> </span></small>\n        </Card.Footer>\n      </Card>\n      <Card className='text-center'>\n       <Card.Body>\n          <Card.Title style={{color:'orange', fontWeight:'bold',fontSize:'26px'}}>Recovered</Card.Title>\n          <Card.Text>\n          <NumberFormat value={recovered} displayType={'text'}\n           thousandSeparator={true}/>\n          </Card.Text>\n        </Card.Body>\n        <Card.Footer style={{backgroundColor:'#9AC5B0'}}>\n          <small className=\"text-muted\">\n             <span style={{color:'darkGreen', fontSize:'16px'}}>\n               Last updated: <b>{time}</b></span></small>\n        </Card.Footer>\n      </Card>\n      <Card className='text-center'>\n        <Card.Body>\n          <Card.Title style={{color:'orange', fontWeight:'bold',fontSize:'26px'}}>Deaths</Card.Title>\n          <Card.Text>\n          <NumberFormat value={deaths} displayType={'text'}\n           thousandSeparator={true}/>\n          </Card.Text>\n        </Card.Body>\n        <Card.Footer style={{backgroundColor:'#F7ADB7'}}>\n          <small className=\"text-muted\">\n            <span style={{color:'darkRed', fontSize:'16px'}}>\n               Last updated: <b>{time}</b></span></small>\n        </Card.Footer>\n      </Card>\n    </CardDeck>\n    )\n}\n","import React,{useState,useEffect} from 'react'\nimport axios from 'axios';\nimport GoogleMapReact from 'google-map-react';\nimport Card from 'react-bootstrap/Card';\n\nexport const Map = () => {\n  const [countries, setCountries] = useState([]);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    async function fetchMap() {\n      try {\n        const response = await axios.get('https://disease.sh/v2/countries');\n        const data = await response.data;\n        console.log(data);\n        setCountries(data);\n      } catch (e) {\n        console.log(e);\n        setCountries([]);\n        setError(true);\n      }\n    }\n    fetchMap();\n  }, []);\n  const newCountries = countries.map((c) => {\n    return (\n      <Card className='text-center'>\n        <Card.Body>\n          <Card.Title>{c.country}</Card.Title>\n          <Card.Text>cases:{c.cases}</Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  });\n\n  const location= countries.map((d)=>{\n      const img = <img height='10px' src={d.countryInfo.flag} alt='flag'/>\n      return (\n          <div \n          lat={d.countryInfo.lat}\n          lng={d.countryInfo.long}\n          style={{\n              color:'purple',\n              fontWeight:'bold',\n              height:'26px',\n              width:'30px',\n              backgroundColor:'transparent',\n              textAlign:'center'\n          }}\n          >\n        \n             {img}\n              <br/>\n              {d.cases}\n             \n          </div>\n      )\n  })\n\n  return (\n    <>\n      {error ? (\n        <p style={{ color: 'red', fontSize: '26px', fontStyle: 'italic' }}>\n          Map is not available\n        </p>\n      ) : (\n          <>\n        <div style={{ height: '100vh', width: '100%' }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{\n              key: 'AIzaSyAdEJjoM20YxdZUQtZ74ZCK9G-DYm-y0fs',\n            }}\n            defaultCenter={{ lat: 62, lng: 15 }}\n            defaultZoom={3}>\n           {location}\n         </GoogleMapReact>\n        </div>\n        </>\n      )}\n    </>\n  );\n};\n","import React,{useState, useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Cards} from './components/Card/Card';\nimport classes from './App.module.css'\nimport axios from 'axios';\nimport {Map} from './components/Map/Map'\n\n\nfunction App() {\n  const [data,setData]= useState({});\n  const [error,setError]=useState(false);\n  const [loading, setLoading]=useState(false);\n  \n  useEffect(()=>{\n   async function fetchData(){\n    try{  \n   setLoading(true)\n   const response = await axios.get('https://disease.sh/v2/all');\n   const data = await response.data\n   console.log(data)\n   setLoading(false);\n   setData(data);\n     }catch (e){\n       console.log(e);\n       setData({});\n       setError(true);\n     }\n    }fetchData()\n    },[]);\nconst date = new Date(parseInt(data.updated));\nconst time = date.toDateString()\n  return (\n     <div className={classes.container}>\n       {error ? (<p style={{fontSize:'30px', color:'red'}}>Error! Something went wrong</p>):\n       <>\n      <h1>COVID-19 STATISTICS</h1>\n       <Cards cases={data.cases} deaths={data.deaths}\n       recovered={data.recovered} loading={loading} time={time}/>\n       <br/><br/>\n       \n     \n       <Map/>\n       </>}\n     </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}